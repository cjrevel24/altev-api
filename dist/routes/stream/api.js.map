{"version":3,"sources":["../../../src/routes/stream/api.js"],"names":["router","require","Router","streamingVideos","get","req","res","status","json","errors","msg","videoId","params","viewSpecificVideo","find","findVideoId","id","parseInt","categoryVideos","filter","videoCategory","video_genre","category","map","getVideos","module","exports"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBC,MAAnB,EAAf;;AACA,eAA4BD,OAAO,CAAC,UAAD,CAAnC;AAAA,IAAQE,eAAR,YAAQA,eAAR,C,CAEA;;;AACAH,MAAM,CAACI,GAAP,CAAW,aAAX,EAA0B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtC,MAAI,CAACH,eAAL,EAAsB;AACpB,WAAOG,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,GAAG,EAAE;AADP,OADM;AADkB,KAArB,CAAP;AAOD;;AAED,SAAOJ,GAAG,CAACE,IAAJ,CAASL,eAAT,CAAP;AACD,CAZD,E,CAcA;;AACAH,MAAM,CAACI,GAAP,CAAW,iBAAX,EAA8B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1C,MAAQK,OAAR,GAAoBN,GAAG,CAACO,MAAxB,CAAQD,OAAR;;AACA,MAAI,CAACA,OAAL,EAAc;AACZ,WAAOL,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,GAAG,EAAE;AADP,OADM;AADkB,KAArB,CAAP;AAOD,GARD,MAQO;AACL,QAAMG,iBAAiB,GAAGV,eAAe,CAACW,IAAhB,CAAqB,UAACC,WAAD,EAAiB;AAC9D,aAAOA,WAAW,CAACC,EAAZ,KAAmBC,QAAQ,CAACN,OAAD,CAAlC;AACD,KAFyB,CAA1B;AAGA,WAAOL,GAAG,CAACE,IAAJ,CAASK,iBAAT,CAAP;AACD;AACF,CAhBD,E,CAkBA;;AACAb,MAAM,CAACI,GAAP,CAAW,yBAAX,EAAsC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClD,MAAMY,cAAc,GAAGf,eAAe,CACnCgB,MADoB,CAEnB,UAACC,aAAD;AAAA,WAAmBA,aAAa,CAACC,WAAd,KAA8BhB,GAAG,CAACO,MAAJ,CAAWU,QAA5D;AAAA,GAFmB,EAIpBC,GAJoB,CAIhB,UAACC,SAAD,EAAe;AAClB,WAAOA,SAAP;AACD,GANoB,CAAvB;;AAQA,MAAI,CAACN,cAAL,EAAqB;AACnB,WAAOZ,GAAG,CACPC,MADI,CACG,GADH,EAEJC,IAFI,CAEC,kDAFD,CAAP;AAGD;;AAED,SAAOF,GAAG,CAACE,IAAJ,CAASU,cAAT,CAAP;AACD,CAhBD;AAkBAO,MAAM,CAACC,OAAP,GAAiB1B,MAAjB","sourcesContent":["const router = require(\"express\").Router();\r\nconst { streamingVideos } = require(\"../../db\");\r\n\r\n//GET STREAM VIDEO LIST\r\nrouter.get(\"/video-list\", (req, res) => {\r\n  if (!streamingVideos) {\r\n    return res.status(404).json({\r\n      errors: [\r\n        {\r\n          msg: \"No videos to display!\",\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  return res.json(streamingVideos);\r\n});\r\n\r\n//VIEW SELECTED VIDEO\r\nrouter.get(\"/video/:videoId\", (req, res) => {\r\n  const { videoId } = req.params;\r\n  if (!videoId) {\r\n    return res.status(404).json({\r\n      errors: [\r\n        {\r\n          msg: \"Please send accurate payload (videoId)!\",\r\n        },\r\n      ],\r\n    });\r\n  } else {\r\n    const viewSpecificVideo = streamingVideos.find((findVideoId) => {\r\n      return findVideoId.id === parseInt(videoId);\r\n    });\r\n    return res.json(viewSpecificVideo);\r\n  }\r\n});\r\n\r\n//GET VIDEO BY CATEGORY\r\nrouter.get(\"/search-video/:category\", (req, res) => {\r\n  const categoryVideos = streamingVideos\r\n    .filter(\r\n      (videoCategory) => videoCategory.video_genre === req.params.category\r\n    )\r\n    .map((getVideos) => {\r\n      return getVideos;\r\n    });\r\n\r\n  if (!categoryVideos) {\r\n    return res\r\n      .status(404)\r\n      .json(\"The book with the given category was not found!.\");\r\n  }\r\n\r\n  return res.json(categoryVideos);\r\n});\r\n\r\nmodule.exports = router;\r\n"],"file":"api.js"}