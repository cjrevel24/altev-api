{"version":3,"sources":["../../src/routes/auth.js"],"names":["router","require","Router","check","validationResult","JWT","bcrypt","users","checkAuth","ls","post","isEmail","isLength","min","req","res","body","email","password","firstName","lastName","errors","isEmpty","status","json","array","user","find","msg","push","sign","expiresIn","access_token","refresh_token","get","token","header","getUser","filter","map","specificUser","removeToken","remove","send","error","console","log","module","exports"],"mappings":"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","sourcesContent":["const router = require(\"express\").Router();\r\nconst { check, validationResult } = require(\"express-validator\");\r\nconst JWT = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst { users } = require(\"../db\");\r\nconst checkAuth = require(\"../middleware/checkAuth\");\r\nconst ls = require(\"local-storage\");\r\n\r\n// SIGNUP\r\nrouter.post(\r\n  \"/signup\",\r\n  [\r\n    check(\"email\", \"Please input a valid email\").isEmail(),\r\n    check(\r\n      \"password\",\r\n      \"Please input a password with a min length of 6\"\r\n    ).isLength({ min: 6 }),\r\n  ],\r\n  async (req, res) => {\r\n    const { email, password, firstName, lastName } = req.body;\r\n\r\n    // Validate the inputs\r\n    const errors = validationResult(req);\r\n\r\n    if (!errors.isEmpty()) {\r\n      return res.status(422).json({\r\n        errors: errors.array(),\r\n      });\r\n    }\r\n\r\n    // Validate if the user doesnt already exist;\r\n    let user = users.find((user) => {\r\n      return user.email === email;\r\n    });\r\n\r\n    if (user) {\r\n      return res.status(422).json({\r\n        errors: [\r\n          {\r\n            msg: \"This user already exists\",\r\n          },\r\n        ],\r\n      });\r\n    }\r\n\r\n    // Hash the password\r\n    // const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Save the password into the db\r\n    users.push({\r\n      email,\r\n      password,\r\n      firstName,\r\n      lastName,\r\n    });\r\n\r\n    const access_token = await JWT.sign(\r\n      { email },\r\n      \"nfb32iur32ibfqfvi3vf932bg932g932\",\r\n      { expiresIn: 360000 }\r\n    );\r\n\r\n    const refresh_token = await JWT.sign(\r\n      { email },\r\n      \"nfb32iur32ibfqfvi3vf932bg932g932\",\r\n      {\r\n        expiresIn: 360000,\r\n      }\r\n    );\r\n\r\n    return res.json({\r\n      access_token,\r\n      refresh_token,\r\n    });\r\n  }\r\n);\r\n\r\n// LOGIN\r\nrouter.post(\"/login\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n  // Check if user with email exists\r\n\r\n  let user = users.find((user) => {\r\n    return user.email === email;\r\n  });\r\n\r\n  if (!user) {\r\n    return res.status(422).json({\r\n      errors: [\r\n        {\r\n          msg: \"Invalid Credentials\",\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  // Check if the password if valid\r\n  // let isMatch = await bcrypt.compare(password, user.password);\r\n\r\n  // if (!isMatch) {\r\n  //   return res.status(404).json({\r\n  //     errors: [\r\n  //       {\r\n  //         msg: \"Invalid Credentials\",\r\n  //       },\r\n  //     ],\r\n  //   });\r\n  // }\r\n\r\n  // Send JSON WEB TOKEN\r\n  const access_token = await JWT.sign(\r\n    { email },\r\n    \"nfb32iur32ibfqfvi3vf932bg932g932\",\r\n    {\r\n      expiresIn: 360000,\r\n    }\r\n  );\r\n\r\n  const refresh_token = await JWT.sign(\r\n    { email },\r\n    \"nfb32iur32ibfqfvi3vf932bg932g932\",\r\n    {\r\n      expiresIn: 360000,\r\n    }\r\n  );\r\n\r\n  return res.json({\r\n    access_token,\r\n    refresh_token,\r\n  });\r\n});\r\n\r\n// ALL USER\r\nrouter.get(\"/all\", checkAuth, (req, res) => {\r\n  return res.json(users);\r\n});\r\n\r\n//GET SPECIFIC USER\r\nrouter.get(\"/me\", checkAuth, (req, res) => {\r\n  const token = req.header(\"x-auth-token\");\r\n\r\n  if (token == null) {\r\n    return res.status(404).json({\r\n      errors: [\r\n        {\r\n          msg: \"Token invalid\",\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  const getUser = users\r\n    .filter((user) => {\r\n      return user.email === req.user;\r\n    })\r\n    .map((specificUser) => {\r\n      return {\r\n        email: specificUser.email,\r\n        firstName: specificUser.firstName,\r\n        lastName: specificUser.lastName,\r\n      };\r\n    });\r\n\r\n  return res.json(getUser);\r\n});\r\n\r\n//LOGOUT USER\r\nrouter.delete(\"/logout\", checkAuth, async (req, res) => {\r\n  const { refresh_token } = req.body;\r\n  try {\r\n    const removeToken = refresh_token;\r\n    ls.remove(removeToken);\r\n    res.send(\"Logout successfully!!\");\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(500).send(error);\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"file":"auth.js"}